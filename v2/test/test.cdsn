!>
................................................................................
.    Copyright (c) 2009-2024 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See http://opensource.org/licenses/MIT)                        .
................................................................................
<!

!>
GO TEST NOTATION
This document contains a formal definition of a test grammar notation using
Crater Dog Syntax Notationâ„¢ (CDSN).  It demonstrates each of the possible kinds
of token and rule definition.

A language grammar consists of a set of token definitions and rule definitions.

The following intrinsic character types are context specific:
 * ANY - Any language specific character.
 * LOWER - Any language specific lowercase character.
 * UPPER - Any language specific uppercase character.
 * DIGIT - Any language specific digit.
 * ESCAPE - Any environment specific escape sequence.
 * CONTROL - Any environment specific (non-printable) control character.
 * EOL - The environment specific end-of-line character.
 * EOF - The environment specific end-of-file marker (pseudo character).

A predicate may be constrained by any of the following cardinalities:
 * predicate{M} - Exactly M instances of the specified predicate.
 * predicate{M..} - M or more instances of the specified predicate.
 * predicate{M..N} - M to N instances of the specified predicate.
 * predicate? - Zero or one instances of the specified predicate.
 * predicate* - Zero or more instances of the specified predicate.
 * predicate+ - One or more instances of the specified predicate.

An inversion "~" within a definition may only be applied to an intrinsic
character type or a glyph range.
<!

!>
RULE DEFINITIONS
The following rules are used by the parser when parsing the stream of tokens
generated by the scanner.  Each rule name begins with an uppercase letter.
The rule definitions may specify the names of tokens or other rules and are
matched by the parser in the order listed.  A rule definition may also be
directly or indirectly recursive.  The sequence of factors within in a rule
definition may be separated by spaces which are ignored by the parser.
<!
Source: Component EOL* EOF  ! Terminated with an end-of-file marker.

Component: Primitive | List{3..5}

Primitive:
    character
    text
    integer
    anything

List: "[" Component (',' Component)* "]"

!>
TOKEN DEFINITIONS
The following token definitions are used by the scanner to generate the
stream of tokens that are processed by the parser.  Each token name begins
with a lowercase letter.  Unlike with rule definitions, a token definition
cannot specify the name of a rule within its definition but it can specify
the name of other tokens.  Token definitions cannot be recursive and the
scanning of tokens is NOT greedy.  And any spaces within a token definition
are NOT ignored.
<!
character: "'" ~CONTROL "'"  ! Any printable character.

text: '"' (
    ESCAPE
    ~CONTROL{2..}
)+ '"'

integer:
    '0'{4}
    '-'? '1'..'9' DIGIT*

anything: ANY

